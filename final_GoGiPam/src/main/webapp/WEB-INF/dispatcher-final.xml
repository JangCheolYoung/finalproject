<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<mvc:annotation-driven/> <!-- 리턴타입을 json 으로 변환하는 ResponseBody 사용시 -->
	
	<!-- [1] DataSource빈 선언 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
    <property name="url" value="jdbc:oracle:thin://@127.0.0.1:1521:xe" />	
	<property name="username" value="final" />
	<property name="password" value="a1234" />
	</bean>

	<!-- [2] SqlSessionFactoryBean 빈 선언 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="mapperLocations">
		<list>
			<value>classpath:config/MemberMapper.xml</value>
			<value>classpath:config/ListMapper.xml</value>
			<value>classpath:config/OptionMapper.xml</value>
			<value>classpath:config/AddressMapper.xml</value>
			<value>classpath:config/CartMapper.xml</value>
			<value>classpath:config/FaqMapper.xml</value>
			<value>classpath:config/QnaMapper.xml</value>
		</list>
	</property>
	</bean>

	<!-- [3] SqlSessionTemplate 빈 선언 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- [4] TransactionManager 빈 선언 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- [5] 선언적 트랜잭션(tx:advice) 선언 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*Process"
				rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- [6] 트랜잭션 설정 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* service.*.*(..))" />
	</aop:config>

	<!-- [7] DAO 빈 선언 -->
	<bean id="mdao" class="dao.MemberDAOImp">
		<property name="sqlSession" ref="sqlSession"></property>
	</bean>
	
	<bean id="ldao" class="dao.ListDAOImp">
		<property name="sqlSession" ref="sqlSession"></property>
	</bean>
	
	<bean id="odao" class="dao.OptionDAOImp">
		<property name="sqlSession" ref="sqlSession"></property>
	</bean>
	
	<bean id="adao" class="dao.AddressDAOImp">
		<property name="sqlSession" ref="sqlSession"></property>
	</bean>
	
	<bean id="fdao" class="dao.FaqDAOImp">
		<property name="sqlSession" ref="sqlSession" />
	</bean>

	<bean id="cdao" class="dao.CartDAOImp">
		<property name="sqlSession" ref="sqlSession" />
	</bean>
	
	<bean id="qdao" class="dao.QnaDAOImp">
		<property name="sqlSession" ref="sqlSession" />
	</bean>

	<!-- [8] Service 빈 선언 -->
	<bean id="memService" class="service.MemberServiceImp">
		<property name="mdao" ref="mdao"></property>
	</bean>
	
	<bean id="listService" class="service.ListServiceImp">
		<property name="ldao" ref="ldao"></property>
	</bean>
	
	<bean id="optionService" class="service.OptionServiceImp">
		<property name="odao" ref="odao"></property>
	</bean>
	
	<bean id="addressService" class="service.AddressServiceImp">
		<property name="adao" ref="adao"></property>
	</bean>
	
	<bean id="faqService" class="service.FaqServiceImp">
		<property name="fdao" ref="fdao"></property>
	</bean>
	
	<bean id="cartService" class="service.CartServiceImp">
		<property name="cdao" ref="cdao"></property>
	</bean>
	<bean id="qnaService" class="service.QnaServiceImp">
		<property name="qdao" ref="qdao"></property>
	</bean>
	
	<!-- 파일 업로드 시작 -->
	<!-- 첨부 파일의 임시기억 장치 경로 설정 , 현 버전에선 이 작업을 안해주어도 됨-->
	<bean id="uploadDirResource"
	class="org.springframework.core.io.FileSystemResource">
	<!-- <constructor-arg value="c:/temp/"> -->
	<constructor-arg value="./src/main/webapp/files/" />
	</bean>
	
	<!-- 첨부파일을 임시기억장소에 저장한다. -->
	<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="uploadTempDir" ref="uploadDirResource"/> <!-- 임시기억장치경로 설정 안할 시 이 문장 삭제해야함 -->
	<property name="maxUploadSize" value="1000000000" />
	</bean>
	<!-- 파일 업로드 끝 -->
		
	<!-- [9] Controller 빈 선언 -->
	<bean class="controller.MainController">
		<property name="memberService" ref="memService"></property>
		<property name="listService" ref="listService"></property>
		<property name="optionService" ref="optionService"></property>
		<property name="addressService" ref="addressService"></property>
		<property name="faqService" ref="faqService"></property>
		<property name="cartService" ref="cartService"></property>
		<property name="qnaService" ref="qnaService"></property>
	</bean>
	
	<!-- interceptor -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/faqPage.do" />
			<mvc:mapping path="/cart.do" />
			<mvc:mapping path="/qnaPage.do" />
			<mvc:mapping path="/order.do" />
			<bean class="interceptor.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- [10] View 빈 선언 -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<!-- 우선순위를 지정. bean id 값하고 setViewName에서 선언한 값이 일치하는 빈을 실행하라라는 뜻 -->
		<property name="order" value="1"></property>
	</bean>
	
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- InternalResourceViewResolver는 항상 마지막에 해야함, 일치하는 값을 못찾아버리면 종료해버림 -->
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />	
		<property name="order" value="2" />	
	</bean>
	
</beans>
